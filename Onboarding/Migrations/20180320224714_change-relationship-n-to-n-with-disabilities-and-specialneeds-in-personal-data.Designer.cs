// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Onboarding.Models;
using System;

namespace Onboarding.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180320224714_change-relationship-n-to-n-with-disabilities-and-specialneeds-in-personal-data")]
    partial class changerelationshipntonwithdisabilitiesandspecialneedsinpersonaldata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Onboarding.Models.AddressKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AddressKinds");
                });

            modelBuilder.Entity("Onboarding.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Onboarding.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Onboarding.Models.Disability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Disabilities");
                });

            modelBuilder.Entity("Onboarding.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<DateTime?>("SendBy");

                    b.HasKey("Id");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Onboarding.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Onboarding.Models.HighSchoolKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("HighSchoolKinds");
                });

            modelBuilder.Entity("Onboarding.Models.MaritalStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("Onboarding.Models.PersonalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("AddressKindId");

                    b.Property<string>("AssumedName");

                    b.Property<string>("BirthCity");

                    b.Property<Guid?>("BirthCountryId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<Guid?>("BirthStateId");

                    b.Property<string>("CPF");

                    b.Property<string>("City");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("ComplementAddress");

                    b.Property<string>("DbState");

                    b.Property<string>("Email");

                    b.Property<Guid>("EnrollmentId");

                    b.Property<int>("ExternalId");

                    b.Property<Guid?>("GenderId");

                    b.Property<string>("Handicap");

                    b.Property<Guid?>("HighSchoolGraduationCountryId");

                    b.Property<string>("HighSchoolGraduationYear");

                    b.Property<Guid?>("HighSchoolKindId");

                    b.Property<string>("Landline");

                    b.Property<Guid?>("MaritalStatusId");

                    b.Property<string>("MothersName");

                    b.Property<string>("Nationality");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid?>("RaceId");

                    b.Property<string>("RealName");

                    b.Property<Guid?>("StateId");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Zipcode");

                    b.HasKey("Id");

                    b.HasIndex("AddressKindId");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("BirthStateId");

                    b.HasIndex("EnrollmentId")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.HasIndex("HighSchoolGraduationCountryId");

                    b.HasIndex("HighSchoolKindId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("RaceId");

                    b.HasIndex("StateId");

                    b.ToTable("PersonalData");
                });

            modelBuilder.Entity("Onboarding.Models.PersonalDataDisability", b =>
                {
                    b.Property<Guid>("PersonalDataId");

                    b.Property<Guid>("DisabilityId");

                    b.HasKey("PersonalDataId", "DisabilityId");

                    b.HasIndex("DisabilityId");

                    b.ToTable("PersonalDataDisability");
                });

            modelBuilder.Entity("Onboarding.Models.PersonalDataSpecialNeed", b =>
                {
                    b.Property<Guid>("PersonalDataId");

                    b.Property<Guid>("SpecialNeedId");

                    b.HasKey("PersonalDataId", "SpecialNeedId");

                    b.HasIndex("SpecialNeedId");

                    b.ToTable("PersonalDataSpecialNeed");
                });

            modelBuilder.Entity("Onboarding.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Onboarding.Models.SpecialNeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<Guid>("DisabilityId");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DisabilityId");

                    b.ToTable("SpecialNeeds");
                });

            modelBuilder.Entity("Onboarding.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CommitedBy");

                    b.Property<DateTime>("CommittedAt");

                    b.Property<string>("DbState");

                    b.Property<int>("ExternalId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Onboarding.Models.City", b =>
                {
                    b.HasOne("Onboarding.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Onboarding.Models.PersonalData", b =>
                {
                    b.HasOne("Onboarding.Models.AddressKind", "AddressKind")
                        .WithMany()
                        .HasForeignKey("AddressKindId");

                    b.HasOne("Onboarding.Models.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("BirthCountryId");

                    b.HasOne("Onboarding.Models.State", "BirthState")
                        .WithMany()
                        .HasForeignKey("BirthStateId");

                    b.HasOne("Onboarding.Models.Enrollment", "Enrollment")
                        .WithOne("PersonalData")
                        .HasForeignKey("Onboarding.Models.PersonalData", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Onboarding.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Onboarding.Models.Country", "HighSchoolGraduationCountry")
                        .WithMany()
                        .HasForeignKey("HighSchoolGraduationCountryId");

                    b.HasOne("Onboarding.Models.HighSchoolKind", "HighSchollKind")
                        .WithMany()
                        .HasForeignKey("HighSchoolKindId");

                    b.HasOne("Onboarding.Models.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("Onboarding.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("Onboarding.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Onboarding.Models.PersonalDataDisability", b =>
                {
                    b.HasOne("Onboarding.Models.Disability", "Disability")
                        .WithMany()
                        .HasForeignKey("DisabilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Onboarding.Models.PersonalData", "PersonalData")
                        .WithMany("PersonalDataDisabilities")
                        .HasForeignKey("PersonalDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Onboarding.Models.PersonalDataSpecialNeed", b =>
                {
                    b.HasOne("Onboarding.Models.PersonalData", "PersonalData")
                        .WithMany("PersonalDataSpecialNeeds")
                        .HasForeignKey("PersonalDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Onboarding.Models.SpecialNeed", "SpecialNeed")
                        .WithMany()
                        .HasForeignKey("SpecialNeedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Onboarding.Models.SpecialNeed", b =>
                {
                    b.HasOne("Onboarding.Models.Disability", "Disability")
                        .WithMany("SpecialNeeds")
                        .HasForeignKey("DisabilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
